#!/bin/bash
# if [ "$#" != 1 ]; then
    # echo "usage: ./run 2016-xx-xx &"
    # echo "这个时间代表获取它两周前的数据"
    # exit 2
#fi
#确认脚本路径
cd /rd/shellstudy/Tools/TY
	dir=`pwd`
	if [[ "$dir" =~ "TY" ]]
	then
		echo "path : $dir"
	else
		dir="${dir}/TY"
		echo "path : $dir"
	fi
#准备基础数据
	date=$1
	echo "=====waiting for data ready====="
	sh ${dir}/data.sh && echo "======data ready!====="
	echo "===== start res handle ====="
	nohup sh ${dir}/reshandle.sh && echo "=====waiting for rpm handle====="
	time sh ${dir}/rpmhandle.sh
	echo "===== work done ====="
	echo "please check your report: Report"

# ##处理邮件数据
	sed "s/\t/|/g;s/424892/api3g2/g;s/424891/api3g/g;s/41699/mlvmama/g" Report > ${dir}/files/new_report
	
	# #以响应时间排序的所有接口数据
	sort -rn -t '|' -k 8 ${dir}/files/new_report > ${dir}/files/Allist
	
	# #新版本2秒以上访问量大于1000的数据
	nowversion=`awk -F '|' '{print $5}' ${dir}/files/new_report| grep [0-9] |sort -u |tail -n1`
	grep "|${nowversion}|" ${dir}/files/new_report | sort -rn -t '|' -k 9 |awk -F'|' '!a[$3_$4_$5_$6_$7]++'  |awk -F '|' '{if($8 > 2 && $9 > 1000 ){print}}' > ${dir}/files/TopNew
	
	# #前一个版本2秒以上访问量大于1000的数据
	prevversion=`awk -F '|' '{print $5}' ${dir}/files/new_report| grep [0-9] |sort -u |tail -n2 | head -n1`
	echo "now:${nowversion}  prev:${prevversion} "
	grep "|${prevversion}|" ${dir}/files/new_report | sort -rn -t '|' -k 9 |awk -F'|' '!a[$3_$4_$5_$6_$7]++'  |awk -F '|' '{if($8 > 2 && $9 > 1000 ){print}}' > ${dir}/files/TopPrev
	
	# #新版本不重复接口所有数据
	grep "|${nowversion}|" ${dir}/files/new_report | sort -rn -t '|' -k 8 | awk -F'|' '!a[$3_$4]++' > ${dir}/files/StandNew
	# #老版本不重复接口所有数据
	grep "|${prevversion}|" ${dir}/files/new_report | sort -rn -t '|' -k 8 | awk -F'|' '!a[$3_$4]++' > ${dir}/files/StandPrev
	
	#计算各接口占比
	DataTotal=`grep 'api3g2|' ${dir}/files/new_report |awk 'END{print NR}'`
	Totalnew=`awk 'END{print NR}' ${dir}/files/StandNew`
	Totalprev=`awk 'END{print NR}' ${dir}/files/StandPrev`
	ms=`grep 'api3g2|'  ${dir}/files/new_report |awk -F'|' '{if($8 < 1){print}}' |awk 'END{print NR}'`
	one=`grep 'api3g2|'  ${dir}/files/new_report |awk -F'|' '{if($8 >= 1 && $8 < 2 ){print}}'  |awk 'END{print NR}'`
	two=`grep 'api3g2|'  ${dir}/files/new_report |awk -F'|' '{if($8 >= 2 && $8 < 3){print}}'  |awk 'END{print NR}'`
	three=`grep 'api3g2|'  ${dir}/files/new_report |awk -F'|' '{if($8 >= 3 && $8 < 4){print}}'  |awk 'END{print NR}'`
	four=`grep 'api3g2|'  ${dir}/files/new_report |awk -F'|' '{if($8 >= 4 && $8 < 5){print}}'  |awk 'END{print NR}'`
	five=`grep 'api3g2|'  ${dir}/files/new_report |awk -F'|' '{if($8 >= 5){print}}'  |awk 'END{print NR}'`

	zs=`awk 'BEGIN{printf "%.f%%\n",('$ms'/'$DataTotal')*100}'`
	os=`awk 'BEGIN{printf "%.f%%\n",('${one}'/'${DataTotal}')*100}'`
	ts=`awk 'BEGIN{printf "%.f%%\n",('${two}'/'${DataTotal}')*100}'`
	tts=`awk 'BEGIN{printf "%.f%%\n",('${three}'/'${DataTotal}')*100}'`
	fs=`awk 'BEGIN{printf "%.f%%\n",('${four}'/'${DataTotal}')*100}'`
	ffs=`awk 'BEGIN{printf "%.f%%\n",('${five}'/'${DataTotal}')*100}'`

	echo "接口数据（接口数）：${DataTotal} (${Total})"
	echo "毫秒级：${zs}"
	echo "1~2秒：${os}"
	echo "2~3秒：${ts}"
	echo "3~4秒：${tts}"
	echo "4~5秒：${fs}"
	echo "5秒以上：${ffs}"
	
	now_month=`date +%_m`
	if [[ `date +%e` -ge '15' ]]
	then
		now_des="${now_month}月前2周"
	else
		now_des="`expr ${now_month} - 1`月后2周"
	fi
mysql -plvmama tingyun <<EOF
INSERT INTO ty_rate (des,ms_level,one_level,two_level,three_level,four_level,five_level) VALUES ("${now_des}","${zs}","${os}","${ts}","${tts}","${fs}","${ffs}");
EOF
#构造HTML
da=`date +%F`
Hfile=${dir}/reports/TYreport_${da}.html
>$Hfile
(
cat << EOF
<!DOCTYPE html>
<html lang="zh-CN">
<head>
<meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><title>LVMAMA 听云半月刊 $now_des </title>
<link href="http://cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet">
EOF
)>> $Hfile
cat ${dir}/files/cssfile >> $Hfile
(
cat << EOF
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.2.2/Chart.bundle.min.js"></script>
</head><body><div class="container"><div class="page-header"><h1>听云接口报告</h1></div>
<div class="row"><div class="panel panel-lvmm"><div class="panel-heading">本期接口响应时间简报</div>
<div class="panel-body"><p>接口数据总数：${DataTotal}	| 去重后2版本实际接口数：${nowversion}/${Totalnew}  ${prevversion}/${Totalprev}</p>
<div id="canvas-holder" style="height:70%width:100%;background-color:#f1f1f1;"><canvas id="chart-area1" /></canvas></div></div>
<table class="table table-hover table-condensed table-responsive"><thead><tr class="info"><th>#</th><th>时间区间</th><th>毫秒级</th><th>1~2秒</th><th>2~3秒</th><th>3~4秒</th><th>4~5秒</th><th>5秒以上</th></tr></thead>
EOF
)>> $Hfile
depts=`mysql -plvmama tingyun -H -e "select * from ty_rate"`
echo "$depts" | sed 's/<\/TR>/<\/TR>\n/g' |tail -n +2 >> $Hfile
(
cat << EOF
</div></div><hr><div class="row"><div class="panel panel-lvmm">
<div class="panel-heading">本期建议优化列表，仅列出最新2个版本</div>
<ul class="nav nav-tabs nav-justified" role="tablist">
<li role="presentation" class="active"><a href="#topnow" aria-controls="topnow" role="tab" data-toggle="tab">APP版本：${nowversion}</a></li>
<li role="presentation"><a href="#topprev" aria-controls="topprev" role="tab" data-toggle="tab">APP版本：${prevversion}</a></li></ul>
<div class="tab-content"><div role="tabpanel" class="tab-pane active" id="topnow">
<div class="panel-body"><p>列出响应耗时超过2秒，且日访问量超过1000的接口，建议优先优化</p></div>
<table class="table table-hover table-condensed table-responsive">
<thead><tr class="info"><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr></thead><tbody>
EOF
)>> $Hfile
#构造需要修复的新版本
#构造颜色函数，ms ones twos threes fours fives
judge_color()
{
	res=$t
    if [[ `echo "$res<  1"|bc` -eq "1" ]];then
        color=ms
	elif [[ `echo "$res < 2"|bc` -eq "1" ]] && [[ `echo "$res > 1"|bc` -eq "1" ]] || [[ `echo "$res == 1"|bc` -eq "1" ]];then
        color=ones
    elif [[ `echo "$res < 3"|bc` -eq "1" ]] && [[ `echo "$res > 2"|bc` -eq "1" ]] || [[ `echo "$res == 2"|bc` -eq "1" ]];then
        color=twos
    elif [[ `echo "$res < 4"|bc` -eq "1" ]] && [[ `echo "$res > 3"|bc` -eq "1" ]] || [[ `echo "$res == 3"|bc` -eq "1" ]];then
        color=threes
    elif [[ `echo "$res < 5"|bc` -eq "1" ]] && [[ `echo "$res > 4"|bc` -eq "1" ]] || [[ `echo "$res == 4"|bc` -eq "1" ]];then
        color=fours
    else
        color=fives
    fi
}
p=0
cat ${dir}/files/TopNew | while read line
do
	p=`expr ${p} + 1`
	t=`echo $line | awk -F '|' '{print $8}'`
	judge_color
	echo $line | awk -F '|' '{print "<tr><th>'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> $Hfile
done
(
cat << EOF	
</tbody></table></div><div role="tabpanel" class="tab-pane" id="topprev">
<div class="panel-body"><p>列出响应耗时超过2秒，且日访问量超过1000的接口，建议优先优化</p></div>
<table class="table table-hover table-condensed table-responsive"><thead><tr class="info"><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr></thead><tbody>
EOF
)>> $Hfile
#构造需要修复的前一个版本
p=0
cat ${dir}/files/TopPrev | while read line
do
	p=`expr ${p} + 1`
	t=`echo $line | awk -F '|' '{print $8}'`
	judge_color
	echo $line | awk -F '|' '{print "<tr><th>'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> $Hfile
done
(
cat << EOF
</tbody></table></div></div></div></div>
<div class="row"><div class="panel panel-lvmm">
<div class="panel-heading">本期最新2个版本的APP接口数据</div>
<ul class="nav nav-default nav-tabs nav-justified" role="tablist">
<li role="presentation" class="active"><a href="#standnow" aria-controls="standnow" role="tab" data-toggle="tab">本期${nowversion}版本接口按响应排行</a></li>
<li role="presentation"><a href="#standprev" aria-controls="standprev" role="tab" data-toggle="tab">本期${prevversion}版本接口按响应排行</a></li></ul>
<div class="tab-content"><div role="tabpanel" class="tab-pane active" id="standnow">
<div class="panel-body"><p></p></div>
<table class="table table-hover table-condensed table-responsive">
<thead><tr class="info"><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr>
</thead><tbody>
EOF
)>> $Hfile
p=0
cat ${dir}/files/StandNew | while read line
do
	p=`expr ${p} + 1`
	t=`echo $line | awk -F '|' '{print $8}'`
	judge_color
	echo $line | awk -F '|' '{print "<tr><th>'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> $Hfile
done
(cat << EOF				
</tbody></table>
</div>
<div role="tabpanel" class="tab-pane" id="standprev"><div class="panel-body"><p></p></div>
<table class="table table-hover table-condensed table-responsive">
<thead><tr class="info"><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr></thead><tbody>
EOF
)>> $Hfile
p=0
cat ${dir}/files/StandPrev | while read line
do
	p=`expr ${p} + 1`
	t=`echo $line | awk -F '|' '{print $8}'`
	judge_color
	echo $line | awk -F '|' '{print "<tr><th>'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> $Hfile
done
(cat << EOF				
</tbody></table></div></div></div></div><div class="row"><div class="panel panel-lvmm">
<div class="panel-heading"> 本期所有接口数据 </div>
<div class="panel-body"><p>包含api3g2、api3g、m.lvmama三个域名，以响应时间排序</p></div>
<table class="table table-hover table-condensed table-responsive">
<thead><tr class="info"><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr>
</thead><tbody>
EOF
)>> $Hfile
p=0
cat ${dir}/files/Allist | while read line
do
p=`expr ${p} + 1`
t=`echo $line | awk -F '|' '{print $8}'`
judge_color
echo $line | awk -F '|' '{print "<tr><th>'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> $Hfile
done
chart_labels=`mysql -plvmama tingyun -e "select * from ty_rate" | tail -n +2 |sed "s/%//g" |awk '{print $2}'`
label_list=`echo $chart_labels|sed "s/ /\",\"/g;s/^/\"/g;s/$/\"/g"`
msDate=`mysql -plvmama tingyun -e "select * from ty_rate" | tail -n +2 |sed "s/%//g" |awk '{print $3}'`
oDate=`mysql -plvmama tingyun -e "select * from ty_rate" | tail -n +2 |sed "s/%//g" |awk '{print $4}'`
tDate=`mysql -plvmama tingyun -e "select * from ty_rate" | tail -n +2 |sed "s/%//g" |awk '{print $5}'`
ttDate=`mysql -plvmama tingyun -e "select * from ty_rate" | tail -n +2 |sed "s/%//g" |awk '{print $6}'`
fDate=`mysql -plvmama tingyun -e "select * from ty_rate" | tail -n +2 |sed "s/%//g" |awk '{print $7}'`
ffDate=`mysql -plvmama tingyun -e "select * from ty_rate" | tail -n +2 |sed "s/%//g" |awk '{print $8}'`
ms_list=`echo $msDate|sed "s/ /,/g"`
o_list=`echo $oDate|sed "s/ /,/g"`
t_list=`echo $tDate|sed "s/ /,/g"`
tt_list=`echo $ttDate|sed "s/ /,/g"`
f_list=`echo $fDate|sed "s/ /,/g"`
ff_list=`echo $ffDate|sed "s/ /,/g"`
(cat << EOF				
</tbody></table></div></div></div>
<a class="x-goto-top" style="display: block;" href="#top">
<div class="x-arrow"></div>
<div class="x-stick"></div>
</a>
<script src="http://cdn.bootcss.com/jquery/3.1.0/jquery.min.js"></script>
<script src="http://cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
<script>
    var config = {
        type: 'line',
        data: {
            labels: [
EOF
) >> $Hfile
echo "$label_list," >>$Hfile
(
cat << EOF
            ],
            datasets: [
		{
			label: "毫秒",
			borderColor : "rgba(102,204,255,1)",
			borderCapStyle: 'butt',
			backgroundColor : "rgba(102,204,255,0.2)",
			pointBackgroundColor : "rgba(102,204,255,1)",
			pointBorderColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
EOF
) >> $Hfile
echo "data:[$ms_list]," >>$Hfile
(
cat << EOF
			fill:true,
		},{
			borderColor : "rgba(102,204,102,1)",
			borderCapStyle: 'butt',
			backgroundColor : "rgba(102,204,102,0.3)",
			pointBackgroundColor : "rgba(102,204,102,1)",
			pointBorderColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
EOF
) >> $Hfile
echo "data:[$o_list]," >>$Hfile
(
cat << EOF
			fill:false,
		},{
			label: "2~3秒",
			borderColor : "rgba(255,255,51,1)",
			borderCapStyle: 'butt',
			backgroundColor : "rgba(255,255,51,0.4)",
			pointBackgroundColor : "rgba(255,255,51,1)",
			pointBorderColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
EOF
) >> $Hfile
echo "data:[$t_list]," >>$Hfile
(
cat << EOF
			fill:false,
		},{
			label: "3~4秒",
			borderColor : "rgba(255,204,51,1)",
			borderCapStyle: 'butt',
			backgroundColor : "rgba(255,204,51,0.5)",
			pointBackgroundColor : "rgba(255,204,51,1)",
			pointBorderColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
EOF
) >> $Hfile
echo "data:[$tt_list]," >>$Hfile
(
cat << EOF
			fill:false,
		},{
			label: "4~5秒",
			borderColor : "rgba(255,153,51,1)",
			borderCapStyle: 'butt',
			backgroundColor : "rgba(255,153,51,0.6)",
			pointBackgroundColor : "rgba(255,153,51,1)",
			pointBorderColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
EOF
) >> $Hfile
echo "data:[$f_list]," >>$Hfile
(
cat << EOF
			fill:false,
		},{
			label: "5秒以上",
			borderColor : "rgba(255,102,51,1)",
			borderCapStyle: 'butt',
			backgroundColor : "rgba(255,102,51,0.7)",
			pointBackgroundColor : "rgba(255,102,51,1)",
			pointBorderColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
EOF
) >> $Hfile
echo "data:[$ff_list]," >>$Hfile
(
cat << EOF
			fill:false,
		}]}};
    window.onload = function() {
        var ctx1 = document.getElementById("chart-area1").getContext("2d");
        window.myPie = new Chart(ctx1, config);};
</script>
<script>
\$(document).ready(function(){
	\$('.x-goto-top').click(function(){\$('html,body').animate({scrollTop: '0px'}, 800);}); 
})
</script>
</body></html>
EOF
)>> $Hfile

#创建个软连接到djongo目录
rm -f /rd/pystudy/Intest/myweb/tyblog/templates/TYreport.html
ln -s $Hfile /rd/pystudy/Intest/myweb/tyblog/templates/TYreport.html

#最后发邮件

subject='听云接口数据报告'
mailto='chendongdong@lvmama.com,baoli@lvmama.com,qinzubo@lvmama.com'
#mailto='zhangqiang@lvmama.com'
chaosong='zhangfeng@lvmama.com,ltyangyang@lvmama.com,zhouyi@lvmama.com,zhangqiang@lvmama.com,yanpeipei@lvmama.com,guanguofeng@lvmama.com,tianqingyang@lvmama.com'
text='<html><head></head><body><h1>听云APP接口半月数据</h1><p>由于邮件无法完整展示HTML样式，请下载附件打开 或 点下面链接公司内网打开</p><br ><a href="http://10.113.1.35:8000/tyreport/" target=_blank>点我点我</a><br><hr id="FMSigSeperator" style="width: 210px; height: 1px;" color="#b5c4df" size="1" align="left"> <div><span id="_FoxFROMNAME"><div style="MARGIN: 10px; FONT-FAMILY: verdana; FONT-SIZE: 10pt"><div>Send By Test Team</div></div></span></div></body></html>'

echo $text | mutt $mailto -c $chaosong -s $subject  -e 'set content_type="text/html"'  -a ${Hfile}
#echo $text | mutt $mailto -s $subject  -e 'set content_type="text/html"'  -a ${Hfile}
echo "my work done, BYEBYE"
exit 0
