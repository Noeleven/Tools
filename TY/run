#!/bin/bash
#datacheck
if [ "$#" != 1 ]; then
    echo "usage: ./run 2016-xx-xx &"
    echo "这个时间代表获取获取它两周前的数据"
    exit 2
fi
#确认脚本路径
dir=`pwd`
if [[ "$dir" =~ "TY" ]]
then
	echo "path : $dir"
else
	dir="${dir}/TY"
	echo "path : $dir"
fi
#准备基础数据
	# date=$1
	# echo "=====waiting for data ready====="
	# sh ${dir}/data.sh $date && echo "======data ready!====="
	# echo "===== start res handle ====="
	# nohup sh ${dir}/reshandle.sh && echo "=====waiting for rpm handle====="
	# time sh ${dir}/rpmhandle.sh
	# echo "===== work done ====="
	# echo "please check your report: Report"

##处理邮件数据
	sed "s/\t/|/g;s/424892/api3g2/g;s/424891/api3g/g;s/41699/mlvmama/g" Report > new_report
	#以响应时间排序的所有接口数据
	sort -rn -t '|' -k 8 new_report > Allist
	#新版本2秒以上访问量大于1000的数据
	nowversion=`awk -F '|' '{print $5}' new_report| grep [0-9] |sort -u |tail -n1`
	grep "|${nowversion}|" new_report | sort -rn -t '|' -k 9 |awk -F '|' '{if($8 > 2 && $9 > 1000 ){print}}' > TopNew
	#前一个版本2秒以上访问量大于1000的数据
	prevversion=`awk -F '|' '{print $5}' new_report| grep [0-9] |sort -u |tail -n2 | head -n1`
	echo "now:${nowversion}  prev:${prevversion} "
	grep "|${prevversion}|" new_report | sort -rn -t '|' -k 9 |awk -F '|' '{if($8 > 2 && $9 > 1000 ){print}}' > TopPrev
	#新版本不重复接口所有数据
	grep "|${nowversion}|" new_report | sort -rn -t '|' -k 8 | awk -F'|' '!a[$3_$4]++' > StandNew
	#老版本不重复接口所有数据
	grep "|${prevversion}|" new_report | sort -rn -t '|' -k 8 | awk -F'|' '!a[$3_$4]++' > StandPrev
	#计算各接口占比
	DataTotal=`grep 'api3g2|' new_report |awk 'END{print NR}'`
	Total=`awk 'END{print NR}' StandNew`
	ms=`grep 'api3g2|'  new_report |awk -F'|' '{if($8 < 1){print}}' |awk 'END{print NR}'`
	one=`grep 'api3g2|'  new_report |awk -F'|' '{if($8 >= 1 && $8 < 2 ){print}}'  |awk 'END{print NR}'`
	two=`grep 'api3g2|'  new_report |awk -F'|' '{if($8 >= 2 && $8 < 3){print}}'  |awk 'END{print NR}'`
	three=`grep 'api3g2|'  new_report |awk -F'|' '{if($8 >= 3 && $8 < 4){print}}'  |awk 'END{print NR}'`
	four=`grep 'api3g2|'  new_report |awk -F'|' '{if($8 >= 4 && $8 < 5){print}}'  |awk 'END{print NR}'`
	five=`grep 'api3g2|'  new_report |awk -F'|' '{if($8 >= 5){print}}'  |awk 'END{print NR}'`

	zs=`awk 'BEGIN{printf "%.f%%\n",('$ms'/'$DataTotal')*100}'`
	os=`awk 'BEGIN{printf "%.f%%\n",('${one}'/'${DataTotal}')*100}'`
	ts=`awk 'BEGIN{printf "%.f%%\n",('${two}'/'${DataTotal}')*100}'`
	tts=`awk 'BEGIN{printf "%.f%%\n",('${three}'/'${DataTotal}')*100}'`
	fs=`awk 'BEGIN{printf "%.f%%\n",('${four}'/'${DataTotal}')*100}'`
	ffs=`awk 'BEGIN{printf "%.f%%\n",('${five}'/'${DataTotal}')*100}'`

	echo "接口数据（接口数）：${DataTotal} (${Total})"
	echo "毫秒级：${zs}"
	echo "1~2秒：${os}"
	echo "2~3秒：${ts}"
	echo "3~4秒：${tts}"
	echo "4~5秒：${fs}"
	echo "5秒以上：${ffs}"

#构造HTML
#构造头和css
>TYreport.html
(
cat << EOF
<!DOCTYPE html>
<html lang="zh-CN">
<head>
<meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>LVMAMA 听云半月刊</title>
EOF
)>> TYreport.html
cat cssfile >> TYreport.html
(
cat << EOF
</head><body>
<div class="container" style="padding-top:80px">
<div class="row">
<div class="panel panel-lvmm">
<div class="panel-heading">本期接口响应时间简报</div>
<div class="panel-body">
<p>接口数据总数：${DataTotal}	| 去重后实际接口数：${Total}</p></div>
<table class="table table-hover table-condensed table-responsive"><thead><tr><th>时间</th><th>毫秒级</th><th>1~2秒</th><th>2~3秒</th><th>3~4秒</th><th>4~5秒</th><th>5秒以上</th></tr></thead><tbody>
<tr><th>${date}</th><td>${zs}</td><td>${os}</td><td>${ts}</td><td>${tts}</td><td>${fs}</td><td>${ffs}</td></tr></tbody></table></div></div><hr>
<div class="row">
<div class="panel panel-lvmm">
<!-- Default panel contents -->
<div class="panel-heading">本期建议优化列表，仅列出最新2个版本</div>
<ul class="nav nav-tabs nav-justified" role="tablist">
<li role="presentation" class="active"><a href="#topnow" aria-controls="topnow" role="tab" data-toggle="tab">APP版本：${nowversion}</a></li>
<li role="presentation"><a href="#topprev" aria-controls="topprev" role="tab" data-toggle="tab">APP版本：${prevversion}</a></li>
</ul>
<div class="tab-content">
<div role="tabpanel" class="tab-pane active" id="topnow">
<div class="panel-body"><p>列出响应耗时超过3秒，且日访问量超过1000的接口，建议优先优化</p></div>
<table class="table table-hover table-condensed table-responsive">
<thead><tr><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr></thead><tbody>
EOF
)>> TYreport.html
#构造需要修复的新版本
#构造颜色函数，ms ones twos threes fours fives
judge_color()
{
	res=$t
    if [[ `echo "$res<  1"|bc` -eq "1" ]];then
        color=ms
	elif [[ `echo "$res < 2"|bc` -eq "1" ]] && [[ `echo "$res > 1"|bc` -eq "1" ]] || [[ `echo "$res == 1"|bc` -eq "1" ]];then
        color=ones
    elif [[ `echo "$res < 3"|bc` -eq "1" ]] && [[ `echo "$res > 2"|bc` -eq "1" ]] || [[ `echo "$res == 2"|bc` -eq "1" ]];then
        color=twos
    elif [[ `echo "$res < 4"|bc` -eq "1" ]] && [[ `echo "$res > 3"|bc` -eq "1" ]] || [[ `echo "$res == 3"|bc` -eq "1" ]];then
        color=threes
    elif [[ `echo "$res < 5"|bc` -eq "1" ]] && [[ `echo "$res > 4"|bc` -eq "1" ]] || [[ `echo "$res == 4"|bc` -eq "1" ]];then
        color=fours
    else
        color=fives
    fi
}
p=0
cat TopNew | while read line
do
p=`expr ${p} + 1`
t=`echo $line | awk -F '|' '{print $8}'`
judge_color
echo $line | awk -F '|' '{print "<tr><th scope="row">'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> TYreport.html
done
(
cat << EOF	
</tbody></table></div><div role="tabpanel" class="tab-pane" id="topprev">
<div class="panel-body"><p>列出响应耗时超过3秒，且日访问量超过1000的接口，建议优先优化</p></div>
<table class="table table-hover table-condensed table-responsive"><thead><tr><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr></thead><tbody>
EOF
)>> TYreport.html
#构造需要修复的前一个版本
p=0
cat TopPrev | while read line
do
p=`expr ${p} + 1`
t=`echo $line | awk -F '|' '{print $8}'`
judge_color
echo $line | awk -F '|' '{print "<tr><th scope="row">'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> TYreport.html
done
(cat << EOF				
</tbody></table></div>
</div>
</div>
</div>
<div class="row">
<div class="panel panel-lvmm">
<div class="panel-heading">本期最新2个版本的APP接口数据</div>
<ul class="nav nav-default nav-tabs nav-justified" role="tablist">
<li role="presentation" class="active"><a href="#standnow" aria-controls="standnow" role="tab" data-toggle="tab">本期${nowversion}版本接口按响应排行</a></li>
<li role="presentation"><a href="#standprev" aria-controls="standprev" role="tab" data-toggle="tab">本期${prevversion}版本接口按响应排行</a></li>
</ul>
<div class="tab-content">
<div role="tabpanel" class="tab-pane active" id="standnow">
<div class="panel-body"><p></p></div>
<table class="table table-hover table-condensed table-responsive">
<thead><tr><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr>
</thead><tbody>
EOF
)>> TYreport.html
p=0
cat StandNew | while read line
do
p=`expr ${p} + 1`
t=`echo $line | awk -F '|' '{print $8}'`
judge_color
echo $line | awk -F '|' '{print "<tr><th scope="row">'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> TYreport.html
done
(cat << EOF				
</tbody></table>
</div>
<div role="tabpanel" class="tab-pane" id="standprev">
<div class="panel-body"><p></p></div>
<table class="table table-hover table-condensed table-responsive">
<thead><tr><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr>
</thead><tbody>
EOF
)>> TYreport.html
p=0
cat StandPrev | while read line
do
p=`expr ${p} + 1`
t=`echo $line | awk -F '|' '{print $8}'`
judge_color
echo $line | awk -F '|' '{print "<tr><th scope="row">'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> TYreport.html
done
(cat << EOF				
</tbody></table></div>
</div>
</div>
</div>
<div class="row">
<div class="panel panel-lvmm">
<div class="panel-heading"> 本期所有接口数据 </div>
<div class="panel-body"><p>包含api3g2、api3g、m.lvmama三个域名，以响应时间排序</p></div>
<table class="table table-hover table-condensed table-responsive">
<thead><tr><th>序号</th><th>HOST</th><th>描述</th><th>method</th><th>version</th><th>lvversion</th><th>是否HTTPS</th><th>是否POST</th><th>响应时间/秒</th><th>日访问量</th></tr>
</thead><tbody>
EOF
)>> TYreport.html
p=0
cat Allist | while read line
do
p=`expr ${p} + 1`
t=`echo $line | awk -F '|' '{print $8}'`
judge_color
echo $line | awk -F '|' '{print "<tr><th scope="row">'$p'</th><td>"$1"</td><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td><td>"$7"</td><td class='$color'>"$8"</td><td>"$9"</td></tr>"}' >> TYreport.html
done
cat js >> TYreport.html
(cat << EOF				
</tbody></table></div></div></div></body></html>
EOF
)>> TYreport.html
	
#最后发邮件

exit 0
